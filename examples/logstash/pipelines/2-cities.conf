input {
    file {
# Country,City,AccentCity,Region,Population,Latitude,Longitude
# ad,aixas,AixÃ s,06,,42.4833333,1.4666667
        path => [ "/data/worldcitiespop.csv" ]
        start_position => "beginning"
        #sincedb_path => "/tmp/sincedb"
    }
}

#
#           "path" => "/data/sample_cities.csv",
#           "host" => "524facb3a73c",
#           "@version" => "1",
#           "message" => "Country,City,AccentCity,Region,Population,Latitude,Longitude",
#           "@timestamp" => 2022-11-16T19:48:55.233Z
filter {
    # STEP 1 - Remove non relevant fields
    mutate {
        remove_field => [ "path" , "host" ,"@version", "@timestamp" ]
    }
    # STEP 2 - Split each line into multiple fields
    csv {
        source => "message"
        separator => "," # Default value
        columns => [
                        "country",
                        "city",
                        "accentcity",
                        "region",
                        "population",
                        "latitude",
                        "longitude"
                   ]
        # Removing the complete line
        remove_field => [ "message" ]
    }
    # STEP 3. Convert population to integer
    if [population] { # If population has a value
        mutate {
            convert => {
              "population" => "integer"
            }
        }
    } else{
        mutate {
            remove_field => [ "population" ]
        }
    }
    # STEP 4. pack together latitude and longitude inside an array
    mutate {
        add_field => {
            "coordinates" => [ "%{longitude}", "%{latitude}" ]
        }
        remove_field => [ "longitude", "latitude" ]
    }
    # STEP 5. Convert latitude and longitude to floats
    mutate {
        convert => {
          "coordinates" => "float"
        }
    }
    # Another option
    
#    mutate {
#        add_field => {
#            "position" => { 
#                                "lon" => "%{longitude}"
#                                "lat" => "%{latitude}" 
#                             }
#        }
#    }
}

output {
    #stdout {} # This is great for debbuging & testing
    elasticsearch{
        hosts => [ "172.31.3.117:8080" ] # Never for a production environment. 
                                         # In a production enviroment at least 2 nodes of the cluster 
        index => "world-cities-3"
        manage_template => true # Please manage a template for the index(containing the mappings)
        template_name => world_cities
        template => "/templates/cities.json"
    }
}